import telebot
from telebot import types
import json
import os
from flask import Flask, render_template, request, redirect, url_for
from flask_httpauth import HTTPBasicAuth
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '8055683684:AAEnEi2TVivWyOiIln7lHkQpu3NQubhK_eM'
DATA_FILE = 'users.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_users(users):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
user_template = {
    "name": "",
    "age": 0,
    "gender": "",
    "bio": "",
    "photo_id": "",
    "likes": [],
    "dislikes": [],
    "state": "MENU"
}

users = load_users()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)

    if user_id not in users:
        users[user_id] = user_template.copy()
        users[user_id]['state'] = 'REG_NAME'
        save_users(users)
        bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:")
    else:
        show_main_menu(message.chat.id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if not user:
        return start(message)

    state = user['state']

    if state == 'REG_NAME':
        users[user_id]['name'] = message.text
        users[user_id]['state'] = 'REG_AGE'
        save_users(users)
        bot.send_message(message.chat.id, "üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

    elif state == 'REG_AGE':
        if message.text.isdigit():
            users[user_id]['age'] = int(message.text)
            users[user_id]['state'] = 'REG_GENDER'
            save_users(users)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π")
            bot.send_message(message.chat.id, "üöª –í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")

    elif state == 'REG_GENDER':
        if message.text in ["üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π"]:
            users[user_id]['gender'] = "–ú" if "üë®" in message.text else "–ñ"
            users[user_id]['state'] = 'REG_BIO'
            save_users(users)
            bot.send_message(message.chat.id, "üìù –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ:", reply_markup=types.ReplyKeyboardRemove())
        else:
            bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!")

    elif state == 'REG_BIO':
        users[user_id]['bio'] = message.text
        users[user_id]['state'] = 'REG_PHOTO'
        save_users(users)
        bot.send_message(message.chat.id, "üì∏ –ü—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if user and user['state'] == 'REG_PHOTO':
        users[user_id]['photo_id'] = message.photo[-1].file_id
        users[user_id]['state'] = 'MENU'
        save_users(users)
        bot.send_message(message.chat.id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        show_main_menu(message.chat.id)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîç –ò—Å–∫–∞—Ç—å –∞–Ω–∫–µ—Ç—ã")
    bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)


# –ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç
def find_profiles(user_id):
    current_user = users[user_id]
    return [
        uid for uid, profile in users.items()
        if (uid != user_id and
            profile['photo_id'] and
            uid not in current_user['likes'] and
            uid not in current_user['dislikes'])
    ]


# –ü–æ–∫–∞–∑ –∞–Ω–∫–µ—Ç—ã
def show_profile(chat_id, profile_id):
    profile = users[profile_id]
    caption = f"{profile['name']}, {profile['age']}\n\n{profile['bio']}"
    bot.send_photo(
        chat_id,
        profile['photo_id'],
        caption=caption,
        reply_markup=generate_action_buttons()
    )


# –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
def generate_action_buttons():
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚ù§Ô∏è", callback_data="like"),
        types.InlineKeyboardButton("üëé", callback_data="dislike")
    )
    return markup


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.message_handler(func=lambda m: m.text in ["üîç –ò—Å–∫–∞—Ç—å –∞–Ω–∫–µ—Ç—ã"])
def handle_menu(message):
    user_id = str(message.from_user.id)

    if message.text == "üîç –ò—Å–∫–∞—Ç—å –∞–Ω–∫–µ—Ç—ã":
        candidates = find_profiles(user_id)
        if candidates:
            users[user_id]['current_candidate'] = candidates[0]
            save_users(users)
            show_profile(message.chat.id, candidates[0])
        else:
            bot.send_message(message.chat.id, "üòî –ê–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = str(call.from_user.id)
    current_user = users[user_id]

    if call.data in ["like", "dislike"] and 'current_candidate' in current_user:
        candidate_id = current_user['current_candidate']

        if call.data == "like":
            current_user['likes'].append(candidate_id)
            bot.answer_callback_query(call.id, "‚ù§Ô∏è –¢–≤–æ–π –ª–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏
            if user_id in users.get(candidate_id, {}).get('likes', []):
                bot.send_message(
                    call.message.chat.id,
                    f"‚ú® –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {users[candidate_id]['name']}! @{users[candidate_id].get('username', '')}"
                )

        else:  # dislike
            current_user['dislikes'].append(candidate_id)
            bot.answer_callback_query(call.id, "üëé")

        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        candidates = find_profiles(user_id)
        if candidates:
            users[user_id]['current_candidate'] = candidates[0]
            save_users(users)
            show_profile(call.message.chat.id, candidates[0])
        else:
            bot.send_message(call.message.chat.id, "üîç –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
            save_users(users)


# ... (–≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ –∏–∑ –≤–∞—à–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞)

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
app = Flask(__name__)
auth = HTTPBasicAuth()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "secure_password_123"


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@auth.verify_password
def verify_password(username, password):
    return username == ADMIN_USERNAME and password == ADMIN_PASSWORD


# –†–æ—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∫–∏
@app.route('/')
@auth.login_required
def admin_dashboard():
    users_data = load_users()  # –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ

    stats = {
        'total_users': len(users_data),
        'profiles_with_photo': sum(1 for u in users_data.values() if u['photo_id']),
        'active_profiles': sum(1 for u in users_data.values() if u['state'] == 'MENU'),
    }

    return render_template(
        'admin.html',
        users=users_data,
        stats=stats,
        token=TOKEN,  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤ —à–∞–±–ª–æ–Ω
        current_user=auth.current_user()  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )


# –†–æ—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/delete_user', methods=['POST'])
@auth.login_required
def delete_user():
    user_id = request.form['user_id']
    users_data = load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    if user_id in users_data:
        del users_data[user_id]
        save_users(users_data)

    return redirect(url_for('admin_dashboard'))


# –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_admin_panel():
    app.run(port=3000, host='127.0.0.1', debug=False, use_reloader=False)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω–∫–∏
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_admin_panel, daemon=True).start()

    print("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ http://localhost:3000")
    print("–õ–æ–≥–∏–Ω: admin, –ü–∞—Ä–æ–ª—å: secure_password_123")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()